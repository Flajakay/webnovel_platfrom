openapi: 3.0.0
tags:
  - name: Chapters
    description: Chapter management endpoints for creating, reading, updating and deleting novel chapters
components:
  schemas:
    Chapter:
      type: object
      properties:
        id:
          type: string
          example: 5f7d3abd4c6c1d1234567890
        novelId:
          type: string
          example: 5f7d3abd4c6c1d1234567891
        chapterNumber:
          type: integer
          minimum: 1
          example: 1
        title:
          type: string
          maxLength: 200
          example: Chapter 1 - The Beginning
        content:
          type: string
          minLength: 100
          maxLength: 50000
          example: The story begins on a dark and stormy night...
        status:
          type: string
          enum: [draft, published]
          example: published
        readCount:
          type: integer
          minimum: 0
          example: 150
        wordCount:
          type: integer
          minimum: 0
          example: 2500
        estimatedReadTime:
          type: integer
          minimum: 0
          example: 13
        createdAt:
          type: string
          format: date-time
        lastUpdatedAt:
          type: string
          format: date-time

    ChapterNavigation:
      type: object
      properties:
        previousChapter:
          type: integer
          nullable: true
          example: 1
        nextChapter:
          type: integer
          nullable: true
          example: 3

    ChapterStatistics:
      type: object
      properties:
        chapterStats:
          type: array
          items:
            type: object
            properties:
              status:
                type: string
                example: published
              count:
                type: integer
                example: 25
              totalWords:
                type: integer
                example: 75000
              totalReads:
                type: integer
                example: 3500
              avgReadTime:
                type: number
                example: 12.5
        readingProgress:
          type: object
          properties:
            totalChapters:
              type: integer
              example: 30
            totalReadTime:
              type: integer
              example: 360
            avgReadsPerChapter:
              type: number
              example: 140.5
        popularChapters:
          type: array
          items:
            type: object
            properties:
              chapterNumber:
                type: integer
              title:
                type: string
              readCount:
                type: integer
              estimatedReadTime:
                type: integer

    ChapterAnalytics:
      type: object
      properties:
        totalChapters:
          type: integer
          example: 30
        totalWords:
          type: integer
          example: 90000
        totalReads:
          type: integer
          example: 4500
        avgWordCount:
          type: number
          example: 3000.50
        avgReadTime:
          type: number
          example: 15.75
        avgEngagement:
          type: number
          example: 0.0456
        chaptersAnalysis:
          type: array
          items:
            type: object
            properties:
              chapterNumber:
                type: integer
              readCount:
                type: integer
              engagement:
                type: number

paths:
  /novels/{novelId}/chapters:
    post:
      tags: [Chapters]
      summary: Create a new chapter
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: novelId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - chapterNumber
                - title
                - content
              properties:
                chapterNumber:
                  type: integer
                  minimum: 1
                  example: 1
                title:
                  type: string
                  maxLength: 200
                  example: Chapter 1 - The Beginning
                content:
                  type: string
                  minLength: 100
                  maxLength: 50000
                status:
                  type: string
                  enum: [draft, published]
                  default: draft
      responses:
        '201':
          description: Chapter created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    $ref: '#/components/schemas/Chapter'
        '400':
          description: Validation error
        '401':
          description: Not authenticated
        '404':
          description: Novel not found

    get:
      tags: [Chapters]
      summary: Get all chapters of a novel
      parameters:
        - in: path
          name: novelId
          required: true
          schema:
            type: string
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 20
      responses:
        '200':
          description: List of chapters
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      metadata:
                        type: object
                        properties:
                          total:
                            type: integer
                          page:
                            type: integer
                          totalPages:
                            type: integer
                      chapters:
                        type: array
                        items:
                          $ref: '#/components/schemas/Chapter'
        '404':
          description: Novel not found or no chapters found

  /novels/{novelId}/chapters/{chapterNumber}:
    get:
      tags: [Chapters]
      summary: Get specific chapter
      parameters:
        - in: path
          name: novelId
          required: true
          schema:
            type: string
        - in: path
          name: chapterNumber
          required: true
          schema:
            type: integer
        - in: query
          name: includeContent
          schema:
            type: boolean
            default: true
        - in: query
          name: includeNavigation
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Chapter details
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    allOf:
                      - $ref: '#/components/schemas/Chapter'
                      - type: object
                        properties:
                          navigation:
                            $ref: '#/components/schemas/ChapterNavigation'
        '404':
          description: Chapter not found

    put:
      tags: [Chapters]
      summary: Update chapter
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: novelId
          required: true
          schema:
            type: string
        - in: path
          name: chapterNumber
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  maxLength: 200
                content:
                  type: string
                  minLength: 100
                  maxLength: 50000
                status:
                  type: string
                  enum: [draft, published]
      responses:
        '200':
          description: Chapter updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    $ref: '#/components/schemas/Chapter'
        '400':
          description: Validation error
        '401':
          description: Not authenticated
        '404':
          description: Chapter not found

    delete:
      tags: [Chapters]
      summary: Delete chapter
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: novelId
          required: true
          schema:
            type: string
        - in: path
          name: chapterNumber
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Chapter deleted successfully
        '401':
          description: Not authenticated
        '404':
          description: Chapter not found